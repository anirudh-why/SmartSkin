{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aniru\\\\OneDrive\\\\Desktop\\\\SmartSkin\\\\smartskin-app\\\\frontend\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport axios from 'axios';\nimport { toast } from 'react-toastify';\n\n// Create an API client instance with proper error handling\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst apiClient = axios.create();\n\n// Add response interceptor for better error handling\napiClient.interceptors.response.use(response => response, error => {\n  var _error$response;\n  console.error('API Error:', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n  return Promise.reject(error);\n});\nconst AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [silentLoading, setSilentLoading] = useState(false); // Track silent background operations\n\n  useEffect(() => {\n    // Check for token in localStorage\n    const token = localStorage.getItem('token');\n    if (token) {\n      verifyToken(token, true); // Silent verification on app load\n    } else {\n      setLoading(false);\n    }\n  }, []);\n\n  // Set up axios interceptor to include the token in every request\n  useEffect(() => {\n    const interceptor = apiClient.interceptors.request.use(config => {\n      const token = localStorage.getItem('token');\n      if (token) {\n        config.headers.Authorization = `Bearer ${token}`;\n      }\n      return config;\n    }, error => Promise.reject(error));\n    return () => {\n      apiClient.interceptors.request.eject(interceptor);\n    };\n  }, []);\n  const verifyToken = async (token, silent = false) => {\n    if (silent) setSilentLoading(true);\n    if (!silent) setLoading(true);\n    try {\n      const response = await apiClient.post('/api/auth/verify', {\n        token\n      });\n      if (response.data.valid) {\n        setUser(response.data.user);\n\n        // Fetch additional user details after token verification\n        try {\n          const profileData = await fetchUserProfile(true);\n          setUser(prevUser => ({\n            ...prevUser,\n            ...profileData\n          }));\n        } catch (profileError) {\n          console.error('Error fetching profile after token verification:', profileError);\n        }\n      } else {\n        localStorage.removeItem('token');\n        if (!silent) toast.error(\"Session expired. Please login again.\");\n      }\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      console.error('Token verification error:', error);\n      localStorage.removeItem('token');\n      setError(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.error) || 'Authentication error');\n      if (!silent) toast.error(\"Failed to authenticate. Please login again.\");\n    } finally {\n      setLoading(false);\n      if (silent) setSilentLoading(false);\n    }\n  };\n  const login = async (email, password) => {\n    try {\n      const response = await apiClient.post('/api/auth/login', {\n        email,\n        password\n      });\n      const {\n        token\n      } = response.data;\n      localStorage.setItem('token', token);\n      await verifyToken(token);\n      toast.success('Logged in successfully!');\n      return {\n        success: true\n      };\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      const errorMessage = ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.error) || 'Login failed';\n      setError(errorMessage);\n      toast.error(errorMessage);\n      return {\n        success: false,\n        error: errorMessage\n      };\n    }\n  };\n  const register = async (email, password, name) => {\n    try {\n      const response = await apiClient.post('/api/auth/register', {\n        email,\n        password,\n        name\n      });\n      const {\n        token\n      } = response.data;\n      localStorage.setItem('token', token);\n      await verifyToken(token);\n      toast.success('Registration successful!');\n      return {\n        success: true\n      };\n    } catch (error) {\n      var _error$response4, _error$response4$data;\n      const errorMessage = ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.error) || 'Registration failed';\n      setError(errorMessage);\n      toast.error(errorMessage);\n      return {\n        success: false,\n        error: errorMessage\n      };\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem('token');\n    setUser(null);\n    toast.success('Logged out successfully');\n  };\n  const fetchUserProfile = async (silent = false) => {\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        throw new Error('No authentication token found');\n      }\n      const response = await apiClient.get('/api/user/profile');\n      if (response.data) {\n        return response.data;\n      } else {\n        throw new Error('No profile data received');\n      }\n    } catch (error) {\n      var _error$response5;\n      console.error('Failed to fetch profile:', error);\n      // Only show toast if specifically requested and not a auth error\n      if (!silent && ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.status) !== 401) {\n        toast.error('Failed to fetch profile data');\n      }\n      throw error;\n    }\n  };\n  const updatePreferences = async preferences => {\n    try {\n      const response = await apiClient.put('/api/user/preferences', preferences);\n      toast.success('Preferences updated');\n\n      // Update the user state with new preferences\n      setUser(prevUser => ({\n        ...prevUser,\n        preferences: preferences\n      }));\n      return response.data;\n    } catch (error) {\n      toast.error('Failed to update preferences');\n      throw error;\n    }\n  };\n  const fetchRoutines = async (silent = false) => {\n    try {\n      const response = await apiClient.get('/api/user/routines');\n      return response.data.routines || [];\n    } catch (error) {\n      if (!silent) {\n        toast.error('Failed to fetch routines');\n      }\n      console.error('Error fetching routines:', error);\n      return [];\n    }\n  };\n  const saveRoutine = async routineData => {\n    try {\n      const response = await apiClient.post('/api/user/routines', routineData);\n      toast.success('Routine saved successfully');\n      return response.data;\n    } catch (error) {\n      toast.error('Failed to save routine');\n      throw error;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      loading: loading || silentLoading,\n      error,\n      login,\n      register,\n      logout,\n      isAuthenticated: !!user,\n      fetchUserProfile,\n      updatePreferences,\n      fetchRoutines,\n      saveRoutine,\n      apiClient\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 193,\n    columnNumber: 9\n  }, this);\n};\n_s(AuthProvider, \"hwT+6wr8jtXpx43lDVaWTuXZXWA=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","axios","toast","jsxDEV","_jsxDEV","apiClient","create","interceptors","response","use","error","_error$response","console","data","message","Promise","reject","AuthContext","AuthProvider","children","_s","user","setUser","loading","setLoading","setError","silentLoading","setSilentLoading","token","localStorage","getItem","verifyToken","interceptor","request","config","headers","Authorization","eject","silent","post","valid","profileData","fetchUserProfile","prevUser","profileError","removeItem","_error$response2","_error$response2$data","login","email","password","setItem","success","_error$response3","_error$response3$data","errorMessage","register","name","_error$response4","_error$response4$data","logout","Error","get","_error$response5","status","updatePreferences","preferences","put","fetchRoutines","routines","saveRoutine","routineData","Provider","value","isAuthenticated","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","$RefreshReg$"],"sources":["C:/Users/aniru/OneDrive/Desktop/SmartSkin/smartskin-app/frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { toast } from 'react-toastify';\r\n\r\n// Create an API client instance with proper error handling\r\nconst apiClient = axios.create();\r\n\r\n// Add response interceptor for better error handling\r\napiClient.interceptors.response.use(\r\n    response => response, \r\n    error => {\r\n        console.error('API Error:', error.response?.data || error.message);\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n    const [user, setUser] = useState(null);\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n    const [silentLoading, setSilentLoading] = useState(false); // Track silent background operations\r\n\r\n    useEffect(() => {\r\n        // Check for token in localStorage\r\n        const token = localStorage.getItem('token');\r\n        if (token) {\r\n            verifyToken(token, true); // Silent verification on app load\r\n        } else {\r\n            setLoading(false);\r\n        }\r\n    }, []);\r\n\r\n    // Set up axios interceptor to include the token in every request\r\n    useEffect(() => {\r\n        const interceptor = apiClient.interceptors.request.use(\r\n            config => {\r\n                const token = localStorage.getItem('token');\r\n                if (token) {\r\n                    config.headers.Authorization = `Bearer ${token}`;\r\n                }\r\n                return config;\r\n            },\r\n            error => Promise.reject(error)\r\n        );\r\n\r\n        return () => {\r\n            apiClient.interceptors.request.eject(interceptor);\r\n        };\r\n    }, []);\r\n\r\n    const verifyToken = async (token, silent = false) => {\r\n        if (silent) setSilentLoading(true);\r\n        if (!silent) setLoading(true);\r\n        \r\n        try {\r\n            const response = await apiClient.post('/api/auth/verify', { token });\r\n            if (response.data.valid) {\r\n                setUser(response.data.user);\r\n                \r\n                // Fetch additional user details after token verification\r\n                try {\r\n                    const profileData = await fetchUserProfile(true);\r\n                    setUser(prevUser => ({\r\n                        ...prevUser,\r\n                        ...profileData\r\n                    }));\r\n                } catch (profileError) {\r\n                    console.error('Error fetching profile after token verification:', profileError);\r\n                }\r\n            } else {\r\n                localStorage.removeItem('token');\r\n                if (!silent) toast.error(\"Session expired. Please login again.\");\r\n            }\r\n        } catch (error) {\r\n            console.error('Token verification error:', error);\r\n            localStorage.removeItem('token');\r\n            setError(error.response?.data?.error || 'Authentication error');\r\n            \r\n            if (!silent) toast.error(\"Failed to authenticate. Please login again.\");\r\n        } finally {\r\n            setLoading(false);\r\n            if (silent) setSilentLoading(false);\r\n        }\r\n    };\r\n\r\n    const login = async (email, password) => {\r\n        try {\r\n            const response = await apiClient.post('/api/auth/login', { email, password });\r\n            const { token } = response.data;\r\n            localStorage.setItem('token', token);\r\n            await verifyToken(token);\r\n            toast.success('Logged in successfully!');\r\n            return { success: true };\r\n        } catch (error) {\r\n            const errorMessage = error.response?.data?.error || 'Login failed';\r\n            setError(errorMessage);\r\n            toast.error(errorMessage);\r\n            return { success: false, error: errorMessage };\r\n        }\r\n    };\r\n\r\n    const register = async (email, password, name) => {\r\n        try {\r\n            const response = await apiClient.post('/api/auth/register', { email, password, name });\r\n            const { token } = response.data;\r\n            localStorage.setItem('token', token);\r\n            await verifyToken(token);\r\n            toast.success('Registration successful!');\r\n            return { success: true };\r\n        } catch (error) {\r\n            const errorMessage = error.response?.data?.error || 'Registration failed';\r\n            setError(errorMessage);\r\n            toast.error(errorMessage);\r\n            return { success: false, error: errorMessage };\r\n        }\r\n    };\r\n\r\n    const logout = () => {\r\n        localStorage.removeItem('token');\r\n        setUser(null);\r\n        toast.success('Logged out successfully');\r\n    };\r\n\r\n    const fetchUserProfile = async (silent = false) => {\r\n        try {\r\n            const token = localStorage.getItem('token');\r\n            if (!token) {\r\n                throw new Error('No authentication token found');\r\n            }\r\n            \r\n            const response = await apiClient.get('/api/user/profile');\r\n            \r\n            if (response.data) {\r\n                return response.data;\r\n            } else {\r\n                throw new Error('No profile data received');\r\n            }\r\n        } catch (error) {\r\n            console.error('Failed to fetch profile:', error);\r\n            // Only show toast if specifically requested and not a auth error\r\n            if (!silent && error.response?.status !== 401) {\r\n                toast.error('Failed to fetch profile data');\r\n            }\r\n            throw error;\r\n        }\r\n    };\r\n\r\n    const updatePreferences = async (preferences) => {\r\n        try {\r\n            const response = await apiClient.put('/api/user/preferences', preferences);\r\n            toast.success('Preferences updated');\r\n            \r\n            // Update the user state with new preferences\r\n            setUser(prevUser => ({\r\n                ...prevUser,\r\n                preferences: preferences\r\n            }));\r\n            \r\n            return response.data;\r\n        } catch (error) {\r\n            toast.error('Failed to update preferences');\r\n            throw error;\r\n        }\r\n    };\r\n\r\n    const fetchRoutines = async (silent = false) => {\r\n        try {\r\n            const response = await apiClient.get('/api/user/routines');\r\n            return response.data.routines || [];\r\n        } catch (error) {\r\n            if (!silent) {\r\n                toast.error('Failed to fetch routines');\r\n            }\r\n            console.error('Error fetching routines:', error);\r\n            return [];\r\n        }\r\n    };\r\n\r\n    const saveRoutine = async (routineData) => {\r\n        try {\r\n            const response = await apiClient.post('/api/user/routines', routineData);\r\n            toast.success('Routine saved successfully');\r\n            return response.data;\r\n        } catch (error) {\r\n            toast.error('Failed to save routine');\r\n            throw error;\r\n        }\r\n    };\r\n\r\n    return (\r\n        <AuthContext.Provider value={{\r\n            user,\r\n            loading: loading || silentLoading,\r\n            error,\r\n            login,\r\n            register,\r\n            logout,\r\n            isAuthenticated: !!user,\r\n            fetchUserProfile,\r\n            updatePreferences,\r\n            fetchRoutines,\r\n            saveRoutine,\r\n            apiClient\r\n        }}>\r\n            {children}\r\n        </AuthContext.Provider>\r\n    );\r\n};\r\n\r\nexport const useAuth = () => {\r\n    const context = useContext(AuthContext);\r\n    if (!context) {\r\n        throw new Error('useAuth must be used within an AuthProvider');\r\n    }\r\n    return context;\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}